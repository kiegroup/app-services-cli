/*
 * Service Registry Service - Fleet Manager - v1
 *
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kasclient

import (
	"encoding/json"
	"fmt"
)

// RegistryDeploymentStatusValue the model 'RegistryDeploymentStatusValue'
type RegistryDeploymentStatusValue string

// List of RegistryDeploymentStatusValue
const (
	PROCESSING RegistryDeploymentStatusValue = "PROCESSING"
	AVAILABLE RegistryDeploymentStatusValue = "AVAILABLE"
	UNAVAILABLE RegistryDeploymentStatusValue = "UNAVAILABLE"
)

var allowedRegistryDeploymentStatusValueEnumValues = []RegistryDeploymentStatusValue{
	"PROCESSING",
	"AVAILABLE",
	"UNAVAILABLE",
}

func (v *RegistryDeploymentStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistryDeploymentStatusValue(value)
	for _, existing := range allowedRegistryDeploymentStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistryDeploymentStatusValue", value)
}

// NewRegistryDeploymentStatusValueFromValue returns a pointer to a valid RegistryDeploymentStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistryDeploymentStatusValueFromValue(v string) (*RegistryDeploymentStatusValue, error) {
	ev := RegistryDeploymentStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistryDeploymentStatusValue: valid values are %v", v, allowedRegistryDeploymentStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistryDeploymentStatusValue) IsValid() bool {
	for _, existing := range allowedRegistryDeploymentStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistryDeploymentStatusValue value
func (v RegistryDeploymentStatusValue) Ptr() *RegistryDeploymentStatusValue {
	return &v
}

type NullableRegistryDeploymentStatusValue struct {
	value *RegistryDeploymentStatusValue
	isSet bool
}

func (v NullableRegistryDeploymentStatusValue) Get() *RegistryDeploymentStatusValue {
	return v.value
}

func (v *NullableRegistryDeploymentStatusValue) Set(val *RegistryDeploymentStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryDeploymentStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryDeploymentStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryDeploymentStatusValue(val *RegistryDeploymentStatusValue) *NullableRegistryDeploymentStatusValue {
	return &NullableRegistryDeploymentStatusValue{value: val, isSet: true}
}

func (v NullableRegistryDeploymentStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryDeploymentStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
 * Service Registry Service - Fleet Manager - v1
 *
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kasclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type RegistryDeploymentsApi interface {

	/*
	 * CreateRegistryDeployment Create a registry deployment.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiCreateRegistryDeploymentRequest
	 */
	CreateRegistryDeployment(ctx _context.Context) ApiCreateRegistryDeploymentRequest

	/*
	 * CreateRegistryDeploymentExecute executes the request
	 * @return RegistryDeployment
	 */
	CreateRegistryDeploymentExecute(r ApiCreateRegistryDeploymentRequest) (RegistryDeployment, *_nethttp.Response, error)

	/*
	 * DeleteRegistryDeployment Delete a specific Registry Deployment.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param registryDeploymentId
	 * @return ApiDeleteRegistryDeploymentRequest
	 */
	DeleteRegistryDeployment(ctx _context.Context, registryDeploymentId int32) ApiDeleteRegistryDeploymentRequest

	/*
	 * DeleteRegistryDeploymentExecute executes the request
	 */
	DeleteRegistryDeploymentExecute(r ApiDeleteRegistryDeploymentRequest) (*_nethttp.Response, error)

	/*
	 * GetRegistryDeployment Get a specific registry deployment.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param registryDeploymentId
	 * @return ApiGetRegistryDeploymentRequest
	 */
	GetRegistryDeployment(ctx _context.Context, registryDeploymentId int32) ApiGetRegistryDeploymentRequest

	/*
	 * GetRegistryDeploymentExecute executes the request
	 * @return RegistryDeployment
	 */
	GetRegistryDeploymentExecute(r ApiGetRegistryDeploymentRequest) (RegistryDeployment, *_nethttp.Response, error)

	/*
	 * GetRegistryDeployments Get the list of all registry deployments.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetRegistryDeploymentsRequest
	 */
	GetRegistryDeployments(ctx _context.Context) ApiGetRegistryDeploymentsRequest

	/*
	 * GetRegistryDeploymentsExecute executes the request
	 * @return []RegistryDeployment
	 */
	GetRegistryDeploymentsExecute(r ApiGetRegistryDeploymentsRequest) ([]RegistryDeployment, *_nethttp.Response, error)
}

// RegistryDeploymentsApiService RegistryDeploymentsApi service
type RegistryDeploymentsApiService service

type ApiCreateRegistryDeploymentRequest struct {
	ctx _context.Context
	ApiService RegistryDeploymentsApi
	registryDeploymentCreate *RegistryDeploymentCreate
}

func (r ApiCreateRegistryDeploymentRequest) RegistryDeploymentCreate(registryDeploymentCreate RegistryDeploymentCreate) ApiCreateRegistryDeploymentRequest {
	r.registryDeploymentCreate = &registryDeploymentCreate
	return r
}

func (r ApiCreateRegistryDeploymentRequest) Execute() (RegistryDeployment, *_nethttp.Response, error) {
	return r.ApiService.CreateRegistryDeploymentExecute(r)
}

/*
 * CreateRegistryDeployment Create a registry deployment.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateRegistryDeploymentRequest
 */
func (a *RegistryDeploymentsApiService) CreateRegistryDeployment(ctx _context.Context) ApiCreateRegistryDeploymentRequest {
	return ApiCreateRegistryDeploymentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return RegistryDeployment
 */
func (a *RegistryDeploymentsApiService) CreateRegistryDeploymentExecute(r ApiCreateRegistryDeploymentRequest) (RegistryDeployment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RegistryDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistryDeploymentsApiService.CreateRegistryDeployment")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/registryDeployments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.registryDeploymentCreate == nil {
		return localVarReturnValue, nil, reportError("registryDeploymentCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.registryDeploymentCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRegistryDeploymentRequest struct {
	ctx _context.Context
	ApiService RegistryDeploymentsApi
	registryDeploymentId int32
}


func (r ApiDeleteRegistryDeploymentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteRegistryDeploymentExecute(r)
}

/*
 * DeleteRegistryDeployment Delete a specific Registry Deployment.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param registryDeploymentId
 * @return ApiDeleteRegistryDeploymentRequest
 */
func (a *RegistryDeploymentsApiService) DeleteRegistryDeployment(ctx _context.Context, registryDeploymentId int32) ApiDeleteRegistryDeploymentRequest {
	return ApiDeleteRegistryDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		registryDeploymentId: registryDeploymentId,
	}
}

/*
 * Execute executes the request
 */
func (a *RegistryDeploymentsApiService) DeleteRegistryDeploymentExecute(r ApiDeleteRegistryDeploymentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistryDeploymentsApiService.DeleteRegistryDeployment")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/registryDeployments/{registryDeploymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"registryDeploymentId"+"}", _neturl.PathEscape(parameterToString(r.registryDeploymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRegistryDeploymentRequest struct {
	ctx _context.Context
	ApiService RegistryDeploymentsApi
	registryDeploymentId int32
}


func (r ApiGetRegistryDeploymentRequest) Execute() (RegistryDeployment, *_nethttp.Response, error) {
	return r.ApiService.GetRegistryDeploymentExecute(r)
}

/*
 * GetRegistryDeployment Get a specific registry deployment.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param registryDeploymentId
 * @return ApiGetRegistryDeploymentRequest
 */
func (a *RegistryDeploymentsApiService) GetRegistryDeployment(ctx _context.Context, registryDeploymentId int32) ApiGetRegistryDeploymentRequest {
	return ApiGetRegistryDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		registryDeploymentId: registryDeploymentId,
	}
}

/*
 * Execute executes the request
 * @return RegistryDeployment
 */
func (a *RegistryDeploymentsApiService) GetRegistryDeploymentExecute(r ApiGetRegistryDeploymentRequest) (RegistryDeployment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RegistryDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistryDeploymentsApiService.GetRegistryDeployment")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/registryDeployments/{registryDeploymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"registryDeploymentId"+"}", _neturl.PathEscape(parameterToString(r.registryDeploymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorInfo1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRegistryDeploymentsRequest struct {
	ctx _context.Context
	ApiService RegistryDeploymentsApi
}


func (r ApiGetRegistryDeploymentsRequest) Execute() ([]RegistryDeployment, *_nethttp.Response, error) {
	return r.ApiService.GetRegistryDeploymentsExecute(r)
}

/*
 * GetRegistryDeployments Get the list of all registry deployments.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetRegistryDeploymentsRequest
 */
func (a *RegistryDeploymentsApiService) GetRegistryDeployments(ctx _context.Context) ApiGetRegistryDeploymentsRequest {
	return ApiGetRegistryDeploymentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []RegistryDeployment
 */
func (a *RegistryDeploymentsApiService) GetRegistryDeploymentsExecute(r ApiGetRegistryDeploymentsRequest) ([]RegistryDeployment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []RegistryDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistryDeploymentsApiService.GetRegistryDeployments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/registryDeployments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

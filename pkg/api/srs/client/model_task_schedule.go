/*
 * Service Registry Service - Fleet Manager - v1
 *
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kasclient

import (
	"encoding/json"
)

// TaskSchedule struct for TaskSchedule
type TaskSchedule struct {
	// ISO 8601 UTC timestamp.
	FirstExecuteAt string `json:"firstExecuteAt"`
	// Higher number means higher priority. Default priority is 5.
	Priority *int32 `json:"priority,omitempty"`
	IntervalSec *int32 `json:"intervalSec,omitempty"`
}

// NewTaskSchedule instantiates a new TaskSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskSchedule(firstExecuteAt string) *TaskSchedule {
	this := TaskSchedule{}
	this.FirstExecuteAt = firstExecuteAt
	return &this
}

// NewTaskScheduleWithDefaults instantiates a new TaskSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskScheduleWithDefaults() *TaskSchedule {
	this := TaskSchedule{}
	return &this
}

// GetFirstExecuteAt returns the FirstExecuteAt field value
func (o *TaskSchedule) GetFirstExecuteAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstExecuteAt
}

// GetFirstExecuteAtOk returns a tuple with the FirstExecuteAt field value
// and a boolean to check if the value has been set.
func (o *TaskSchedule) GetFirstExecuteAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirstExecuteAt, true
}

// SetFirstExecuteAt sets field value
func (o *TaskSchedule) SetFirstExecuteAt(v string) {
	o.FirstExecuteAt = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *TaskSchedule) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskSchedule) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *TaskSchedule) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *TaskSchedule) SetPriority(v int32) {
	o.Priority = &v
}

// GetIntervalSec returns the IntervalSec field value if set, zero value otherwise.
func (o *TaskSchedule) GetIntervalSec() int32 {
	if o == nil || o.IntervalSec == nil {
		var ret int32
		return ret
	}
	return *o.IntervalSec
}

// GetIntervalSecOk returns a tuple with the IntervalSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskSchedule) GetIntervalSecOk() (*int32, bool) {
	if o == nil || o.IntervalSec == nil {
		return nil, false
	}
	return o.IntervalSec, true
}

// HasIntervalSec returns a boolean if a field has been set.
func (o *TaskSchedule) HasIntervalSec() bool {
	if o != nil && o.IntervalSec != nil {
		return true
	}

	return false
}

// SetIntervalSec gets a reference to the given int32 and assigns it to the IntervalSec field.
func (o *TaskSchedule) SetIntervalSec(v int32) {
	o.IntervalSec = &v
}

func (o TaskSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["firstExecuteAt"] = o.FirstExecuteAt
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.IntervalSec != nil {
		toSerialize["intervalSec"] = o.IntervalSec
	}
	return json.Marshal(toSerialize)
}

type NullableTaskSchedule struct {
	value *TaskSchedule
	isSet bool
}

func (v NullableTaskSchedule) Get() *TaskSchedule {
	return v.value
}

func (v *NullableTaskSchedule) Set(val *TaskSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSchedule(val *TaskSchedule) *NullableTaskSchedule {
	return &NullableTaskSchedule{value: val, isSet: true}
}

func (v NullableTaskSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



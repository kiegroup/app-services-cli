// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package decisclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that DefaultApiMock does implement DefaultApi.
// If this is not the case, regenerate this file with moq.
var _ DefaultApi = &DefaultApiMock{}

// DefaultApiMock is a mock implementation of DefaultApi.
//
// 	func TestSomethingThatUsesDefaultApi(t *testing.T) {
//
// 		// make and configure a mocked DefaultApi
// 		mockedDefaultApi := &DefaultApiMock{
// 			CreateDecisionFunc: func(ctx _context.Context) ApiCreateDecisionRequest {
// 				panic("mock out the CreateDecision method")
// 			},
// 			CreateDecisionExecuteFunc: func(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error) {
// 				panic("mock out the CreateDecisionExecute method")
// 			},
// 			DeleteDecisionByIdFunc: func(ctx _context.Context, id string) ApiDeleteDecisionByIdRequest {
// 				panic("mock out the DeleteDecisionById method")
// 			},
// 			DeleteDecisionByIdExecuteFunc: func(r ApiDeleteDecisionByIdRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteDecisionByIdExecute method")
// 			},
// 			GetDecisionByIdFunc: func(ctx _context.Context, id string) ApiGetDecisionByIdRequest {
// 				panic("mock out the GetDecisionById method")
// 			},
// 			GetDecisionByIdExecuteFunc: func(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error) {
// 				panic("mock out the GetDecisionByIdExecute method")
// 			},
// 			GetMetricsByInstantQueryFunc: func(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest {
// 				panic("mock out the GetMetricsByInstantQuery method")
// 			},
// 			GetMetricsByInstantQueryExecuteFunc: func(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error) {
// 				panic("mock out the GetMetricsByInstantQueryExecute method")
// 			},
// 			GetMetricsByRangeQueryFunc: func(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest {
// 				panic("mock out the GetMetricsByRangeQuery method")
// 			},
// 			GetMetricsByRangeQueryExecuteFunc: func(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error) {
// 				panic("mock out the GetMetricsByRangeQueryExecute method")
// 			},
// 			ListDecisionsFunc: func(ctx _context.Context) ApiListDecisionsRequest {
// 				panic("mock out the ListDecisions method")
// 			},
// 			ListDecisionsExecuteFunc: func(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error) {
// 				panic("mock out the ListDecisionsExecute method")
// 			},
// 		}
//
// 		// use mockedDefaultApi in code that requires DefaultApi
// 		// and then make assertions.
//
// 	}
type DefaultApiMock struct {
	// CreateDecisionFunc mocks the CreateDecision method.
	CreateDecisionFunc func(ctx _context.Context) ApiCreateDecisionRequest

	// CreateDecisionExecuteFunc mocks the CreateDecisionExecute method.
	CreateDecisionExecuteFunc func(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error)

	// DeleteDecisionByIdFunc mocks the DeleteDecisionById method.
	DeleteDecisionByIdFunc func(ctx _context.Context, id string) ApiDeleteDecisionByIdRequest

	// DeleteDecisionByIdExecuteFunc mocks the DeleteDecisionByIdExecute method.
	DeleteDecisionByIdExecuteFunc func(r ApiDeleteDecisionByIdRequest) (Error, *_nethttp.Response, error)

	// GetDecisionByIdFunc mocks the GetDecisionById method.
	GetDecisionByIdFunc func(ctx _context.Context, id string) ApiGetDecisionByIdRequest

	// GetDecisionByIdExecuteFunc mocks the GetDecisionByIdExecute method.
	GetDecisionByIdExecuteFunc func(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error)

	// GetMetricsByInstantQueryFunc mocks the GetMetricsByInstantQuery method.
	GetMetricsByInstantQueryFunc func(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest

	// GetMetricsByInstantQueryExecuteFunc mocks the GetMetricsByInstantQueryExecute method.
	GetMetricsByInstantQueryExecuteFunc func(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error)

	// GetMetricsByRangeQueryFunc mocks the GetMetricsByRangeQuery method.
	GetMetricsByRangeQueryFunc func(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest

	// GetMetricsByRangeQueryExecuteFunc mocks the GetMetricsByRangeQueryExecute method.
	GetMetricsByRangeQueryExecuteFunc func(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error)

	// ListDecisionsFunc mocks the ListDecisions method.
	ListDecisionsFunc func(ctx _context.Context) ApiListDecisionsRequest

	// ListDecisionsExecuteFunc mocks the ListDecisionsExecute method.
	ListDecisionsExecuteFunc func(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateDecision holds details about calls to the CreateDecision method.
		CreateDecision []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateDecisionExecute holds details about calls to the CreateDecisionExecute method.
		CreateDecisionExecute []struct {
			// R is the r argument value.
			R ApiCreateDecisionRequest
		}
		// DeleteDecisionById holds details about calls to the DeleteDecisionById method.
		DeleteDecisionById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteDecisionByIdExecute holds details about calls to the DeleteDecisionByIdExecute method.
		DeleteDecisionByIdExecute []struct {
			// R is the r argument value.
			R ApiDeleteDecisionByIdRequest
		}
		// GetDecisionById holds details about calls to the GetDecisionById method.
		GetDecisionById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDecisionByIdExecute holds details about calls to the GetDecisionByIdExecute method.
		GetDecisionByIdExecute []struct {
			// R is the r argument value.
			R ApiGetDecisionByIdRequest
		}
		// GetMetricsByInstantQuery holds details about calls to the GetMetricsByInstantQuery method.
		GetMetricsByInstantQuery []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetMetricsByInstantQueryExecute holds details about calls to the GetMetricsByInstantQueryExecute method.
		GetMetricsByInstantQueryExecute []struct {
			// R is the r argument value.
			R ApiGetMetricsByInstantQueryRequest
		}
		// GetMetricsByRangeQuery holds details about calls to the GetMetricsByRangeQuery method.
		GetMetricsByRangeQuery []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetMetricsByRangeQueryExecute holds details about calls to the GetMetricsByRangeQueryExecute method.
		GetMetricsByRangeQueryExecute []struct {
			// R is the r argument value.
			R ApiGetMetricsByRangeQueryRequest
		}
		// ListDecisions holds details about calls to the ListDecisions method.
		ListDecisions []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListDecisionsExecute holds details about calls to the ListDecisionsExecute method.
		ListDecisionsExecute []struct {
			// R is the r argument value.
			R ApiListDecisionsRequest
		}
	}
	lockCreateDecision                  sync.RWMutex
	lockCreateDecisionExecute           sync.RWMutex
	lockDeleteDecisionById              sync.RWMutex
	lockDeleteDecisionByIdExecute       sync.RWMutex
	lockGetDecisionById                 sync.RWMutex
	lockGetDecisionByIdExecute          sync.RWMutex
	lockGetMetricsByInstantQuery        sync.RWMutex
	lockGetMetricsByInstantQueryExecute sync.RWMutex
	lockGetMetricsByRangeQuery          sync.RWMutex
	lockGetMetricsByRangeQueryExecute   sync.RWMutex
	lockListDecisions                   sync.RWMutex
	lockListDecisionsExecute            sync.RWMutex
}

// CreateDecision calls CreateDecisionFunc.
func (mock *DefaultApiMock) CreateDecision(ctx _context.Context) ApiCreateDecisionRequest {
	if mock.CreateDecisionFunc == nil {
		panic("DefaultApiMock.CreateDecisionFunc: method is nil but DefaultApi.CreateDecision was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateDecision.Lock()
	mock.calls.CreateDecision = append(mock.calls.CreateDecision, callInfo)
	mock.lockCreateDecision.Unlock()
	return mock.CreateDecisionFunc(ctx)
}

// CreateDecisionCalls gets all the calls that were made to CreateDecision.
// Check the length with:
//     len(mockedDefaultApi.CreateDecisionCalls())
func (mock *DefaultApiMock) CreateDecisionCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateDecision.RLock()
	calls = mock.calls.CreateDecision
	mock.lockCreateDecision.RUnlock()
	return calls
}

// CreateDecisionExecute calls CreateDecisionExecuteFunc.
func (mock *DefaultApiMock) CreateDecisionExecute(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error) {
	if mock.CreateDecisionExecuteFunc == nil {
		panic("DefaultApiMock.CreateDecisionExecuteFunc: method is nil but DefaultApi.CreateDecisionExecute was just called")
	}
	callInfo := struct {
		R ApiCreateDecisionRequest
	}{
		R: r,
	}
	mock.lockCreateDecisionExecute.Lock()
	mock.calls.CreateDecisionExecute = append(mock.calls.CreateDecisionExecute, callInfo)
	mock.lockCreateDecisionExecute.Unlock()
	return mock.CreateDecisionExecuteFunc(r)
}

// CreateDecisionExecuteCalls gets all the calls that were made to CreateDecisionExecute.
// Check the length with:
//     len(mockedDefaultApi.CreateDecisionExecuteCalls())
func (mock *DefaultApiMock) CreateDecisionExecuteCalls() []struct {
	R ApiCreateDecisionRequest
} {
	var calls []struct {
		R ApiCreateDecisionRequest
	}
	mock.lockCreateDecisionExecute.RLock()
	calls = mock.calls.CreateDecisionExecute
	mock.lockCreateDecisionExecute.RUnlock()
	return calls
}

// DeleteDecisionById calls DeleteDecisionByIdFunc.
func (mock *DefaultApiMock) DeleteDecisionById(ctx _context.Context, id string) ApiDeleteDecisionByIdRequest {
	if mock.DeleteDecisionByIdFunc == nil {
		panic("DefaultApiMock.DeleteDecisionByIdFunc: method is nil but DefaultApi.DeleteDecisionById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteDecisionById.Lock()
	mock.calls.DeleteDecisionById = append(mock.calls.DeleteDecisionById, callInfo)
	mock.lockDeleteDecisionById.Unlock()
	return mock.DeleteDecisionByIdFunc(ctx, id)
}

// DeleteDecisionByIdCalls gets all the calls that were made to DeleteDecisionById.
// Check the length with:
//     len(mockedDefaultApi.DeleteDecisionByIdCalls())
func (mock *DefaultApiMock) DeleteDecisionByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockDeleteDecisionById.RLock()
	calls = mock.calls.DeleteDecisionById
	mock.lockDeleteDecisionById.RUnlock()
	return calls
}

// DeleteDecisionByIdExecute calls DeleteDecisionByIdExecuteFunc.
func (mock *DefaultApiMock) DeleteDecisionByIdExecute(r ApiDeleteDecisionByIdRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteDecisionByIdExecuteFunc == nil {
		panic("DefaultApiMock.DeleteDecisionByIdExecuteFunc: method is nil but DefaultApi.DeleteDecisionByIdExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteDecisionByIdRequest
	}{
		R: r,
	}
	mock.lockDeleteDecisionByIdExecute.Lock()
	mock.calls.DeleteDecisionByIdExecute = append(mock.calls.DeleteDecisionByIdExecute, callInfo)
	mock.lockDeleteDecisionByIdExecute.Unlock()
	return mock.DeleteDecisionByIdExecuteFunc(r)
}

// DeleteDecisionByIdExecuteCalls gets all the calls that were made to DeleteDecisionByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.DeleteDecisionByIdExecuteCalls())
func (mock *DefaultApiMock) DeleteDecisionByIdExecuteCalls() []struct {
	R ApiDeleteDecisionByIdRequest
} {
	var calls []struct {
		R ApiDeleteDecisionByIdRequest
	}
	mock.lockDeleteDecisionByIdExecute.RLock()
	calls = mock.calls.DeleteDecisionByIdExecute
	mock.lockDeleteDecisionByIdExecute.RUnlock()
	return calls
}

// GetDecisionById calls GetDecisionByIdFunc.
func (mock *DefaultApiMock) GetDecisionById(ctx _context.Context, id string) ApiGetDecisionByIdRequest {
	if mock.GetDecisionByIdFunc == nil {
		panic("DefaultApiMock.GetDecisionByIdFunc: method is nil but DefaultApi.GetDecisionById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDecisionById.Lock()
	mock.calls.GetDecisionById = append(mock.calls.GetDecisionById, callInfo)
	mock.lockGetDecisionById.Unlock()
	return mock.GetDecisionByIdFunc(ctx, id)
}

// GetDecisionByIdCalls gets all the calls that were made to GetDecisionById.
// Check the length with:
//     len(mockedDefaultApi.GetDecisionByIdCalls())
func (mock *DefaultApiMock) GetDecisionByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetDecisionById.RLock()
	calls = mock.calls.GetDecisionById
	mock.lockGetDecisionById.RUnlock()
	return calls
}

// GetDecisionByIdExecute calls GetDecisionByIdExecuteFunc.
func (mock *DefaultApiMock) GetDecisionByIdExecute(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error) {
	if mock.GetDecisionByIdExecuteFunc == nil {
		panic("DefaultApiMock.GetDecisionByIdExecuteFunc: method is nil but DefaultApi.GetDecisionByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetDecisionByIdRequest
	}{
		R: r,
	}
	mock.lockGetDecisionByIdExecute.Lock()
	mock.calls.GetDecisionByIdExecute = append(mock.calls.GetDecisionByIdExecute, callInfo)
	mock.lockGetDecisionByIdExecute.Unlock()
	return mock.GetDecisionByIdExecuteFunc(r)
}

// GetDecisionByIdExecuteCalls gets all the calls that were made to GetDecisionByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.GetDecisionByIdExecuteCalls())
func (mock *DefaultApiMock) GetDecisionByIdExecuteCalls() []struct {
	R ApiGetDecisionByIdRequest
} {
	var calls []struct {
		R ApiGetDecisionByIdRequest
	}
	mock.lockGetDecisionByIdExecute.RLock()
	calls = mock.calls.GetDecisionByIdExecute
	mock.lockGetDecisionByIdExecute.RUnlock()
	return calls
}

// GetMetricsByInstantQuery calls GetMetricsByInstantQueryFunc.
func (mock *DefaultApiMock) GetMetricsByInstantQuery(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest {
	if mock.GetMetricsByInstantQueryFunc == nil {
		panic("DefaultApiMock.GetMetricsByInstantQueryFunc: method is nil but DefaultApi.GetMetricsByInstantQuery was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMetricsByInstantQuery.Lock()
	mock.calls.GetMetricsByInstantQuery = append(mock.calls.GetMetricsByInstantQuery, callInfo)
	mock.lockGetMetricsByInstantQuery.Unlock()
	return mock.GetMetricsByInstantQueryFunc(ctx, id)
}

// GetMetricsByInstantQueryCalls gets all the calls that were made to GetMetricsByInstantQuery.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByInstantQueryCalls())
func (mock *DefaultApiMock) GetMetricsByInstantQueryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetMetricsByInstantQuery.RLock()
	calls = mock.calls.GetMetricsByInstantQuery
	mock.lockGetMetricsByInstantQuery.RUnlock()
	return calls
}

// GetMetricsByInstantQueryExecute calls GetMetricsByInstantQueryExecuteFunc.
func (mock *DefaultApiMock) GetMetricsByInstantQueryExecute(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error) {
	if mock.GetMetricsByInstantQueryExecuteFunc == nil {
		panic("DefaultApiMock.GetMetricsByInstantQueryExecuteFunc: method is nil but DefaultApi.GetMetricsByInstantQueryExecute was just called")
	}
	callInfo := struct {
		R ApiGetMetricsByInstantQueryRequest
	}{
		R: r,
	}
	mock.lockGetMetricsByInstantQueryExecute.Lock()
	mock.calls.GetMetricsByInstantQueryExecute = append(mock.calls.GetMetricsByInstantQueryExecute, callInfo)
	mock.lockGetMetricsByInstantQueryExecute.Unlock()
	return mock.GetMetricsByInstantQueryExecuteFunc(r)
}

// GetMetricsByInstantQueryExecuteCalls gets all the calls that were made to GetMetricsByInstantQueryExecute.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByInstantQueryExecuteCalls())
func (mock *DefaultApiMock) GetMetricsByInstantQueryExecuteCalls() []struct {
	R ApiGetMetricsByInstantQueryRequest
} {
	var calls []struct {
		R ApiGetMetricsByInstantQueryRequest
	}
	mock.lockGetMetricsByInstantQueryExecute.RLock()
	calls = mock.calls.GetMetricsByInstantQueryExecute
	mock.lockGetMetricsByInstantQueryExecute.RUnlock()
	return calls
}

// GetMetricsByRangeQuery calls GetMetricsByRangeQueryFunc.
func (mock *DefaultApiMock) GetMetricsByRangeQuery(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest {
	if mock.GetMetricsByRangeQueryFunc == nil {
		panic("DefaultApiMock.GetMetricsByRangeQueryFunc: method is nil but DefaultApi.GetMetricsByRangeQuery was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMetricsByRangeQuery.Lock()
	mock.calls.GetMetricsByRangeQuery = append(mock.calls.GetMetricsByRangeQuery, callInfo)
	mock.lockGetMetricsByRangeQuery.Unlock()
	return mock.GetMetricsByRangeQueryFunc(ctx, id)
}

// GetMetricsByRangeQueryCalls gets all the calls that were made to GetMetricsByRangeQuery.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByRangeQueryCalls())
func (mock *DefaultApiMock) GetMetricsByRangeQueryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetMetricsByRangeQuery.RLock()
	calls = mock.calls.GetMetricsByRangeQuery
	mock.lockGetMetricsByRangeQuery.RUnlock()
	return calls
}

// GetMetricsByRangeQueryExecute calls GetMetricsByRangeQueryExecuteFunc.
func (mock *DefaultApiMock) GetMetricsByRangeQueryExecute(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error) {
	if mock.GetMetricsByRangeQueryExecuteFunc == nil {
		panic("DefaultApiMock.GetMetricsByRangeQueryExecuteFunc: method is nil but DefaultApi.GetMetricsByRangeQueryExecute was just called")
	}
	callInfo := struct {
		R ApiGetMetricsByRangeQueryRequest
	}{
		R: r,
	}
	mock.lockGetMetricsByRangeQueryExecute.Lock()
	mock.calls.GetMetricsByRangeQueryExecute = append(mock.calls.GetMetricsByRangeQueryExecute, callInfo)
	mock.lockGetMetricsByRangeQueryExecute.Unlock()
	return mock.GetMetricsByRangeQueryExecuteFunc(r)
}

// GetMetricsByRangeQueryExecuteCalls gets all the calls that were made to GetMetricsByRangeQueryExecute.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByRangeQueryExecuteCalls())
func (mock *DefaultApiMock) GetMetricsByRangeQueryExecuteCalls() []struct {
	R ApiGetMetricsByRangeQueryRequest
} {
	var calls []struct {
		R ApiGetMetricsByRangeQueryRequest
	}
	mock.lockGetMetricsByRangeQueryExecute.RLock()
	calls = mock.calls.GetMetricsByRangeQueryExecute
	mock.lockGetMetricsByRangeQueryExecute.RUnlock()
	return calls
}

// ListDecisions calls ListDecisionsFunc.
func (mock *DefaultApiMock) ListDecisions(ctx _context.Context) ApiListDecisionsRequest {
	if mock.ListDecisionsFunc == nil {
		panic("DefaultApiMock.ListDecisionsFunc: method is nil but DefaultApi.ListDecisions was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListDecisions.Lock()
	mock.calls.ListDecisions = append(mock.calls.ListDecisions, callInfo)
	mock.lockListDecisions.Unlock()
	return mock.ListDecisionsFunc(ctx)
}

// ListDecisionsCalls gets all the calls that were made to ListDecisions.
// Check the length with:
//     len(mockedDefaultApi.ListDecisionsCalls())
func (mock *DefaultApiMock) ListDecisionsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListDecisions.RLock()
	calls = mock.calls.ListDecisions
	mock.lockListDecisions.RUnlock()
	return calls
}

// ListDecisionsExecute calls ListDecisionsExecuteFunc.
func (mock *DefaultApiMock) ListDecisionsExecute(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error) {
	if mock.ListDecisionsExecuteFunc == nil {
		panic("DefaultApiMock.ListDecisionsExecuteFunc: method is nil but DefaultApi.ListDecisionsExecute was just called")
	}
	callInfo := struct {
		R ApiListDecisionsRequest
	}{
		R: r,
	}
	mock.lockListDecisionsExecute.Lock()
	mock.calls.ListDecisionsExecute = append(mock.calls.ListDecisionsExecute, callInfo)
	mock.lockListDecisionsExecute.Unlock()
	return mock.ListDecisionsExecuteFunc(r)
}

// ListDecisionsExecuteCalls gets all the calls that were made to ListDecisionsExecute.
// Check the length with:
//     len(mockedDefaultApi.ListDecisionsExecuteCalls())
func (mock *DefaultApiMock) ListDecisionsExecuteCalls() []struct {
	R ApiListDecisionsRequest
} {
	var calls []struct {
		R ApiListDecisionsRequest
	}
	mock.lockListDecisionsExecute.RLock()
	calls = mock.calls.ListDecisionsExecute
	mock.lockListDecisionsExecute.RUnlock()
	return calls
}

/*
 * Decision Service Fleet Manager
 *
 * Decision Service Fleet Manager is a Rest API to manage decision instances and connectors.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package decisclient

import (
	"encoding/json"
)

// Eventing struct for Eventing
type Eventing struct {
	Id     *string `json:"id,omitempty"`
	Kind   *string `json:"kind,omitempty"`
	Href   *string `json:"href,omitempty"`
	Source *string `json:"source,omitempty"`
	Sink   *string `json:"sink,omitempty"`
}

// NewEventing instantiates a new Eventing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventing() *Eventing {
	this := Eventing{}
	return &this
}

// NewEventingWithDefaults instantiates a new Eventing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventingWithDefaults() *Eventing {
	this := Eventing{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Eventing) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Eventing) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Eventing) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Eventing) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Eventing) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Eventing) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Eventing) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Eventing) SetKind(v string) {
	o.Kind = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Eventing) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Eventing) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Eventing) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Eventing) SetHref(v string) {
	o.Href = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Eventing) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Eventing) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Eventing) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Eventing) SetSource(v string) {
	o.Source = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *Eventing) GetSink() string {
	if o == nil || o.Sink == nil {
		var ret string
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Eventing) GetSinkOk() (*string, bool) {
	if o == nil || o.Sink == nil {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *Eventing) HasSink() bool {
	if o != nil && o.Sink != nil {
		return true
	}

	return false
}

// SetSink gets a reference to the given string and assigns it to the Sink field.
func (o *Eventing) SetSink(v string) {
	o.Sink = &v
}

func (o Eventing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Sink != nil {
		toSerialize["sink"] = o.Sink
	}
	return json.Marshal(toSerialize)
}

type NullableEventing struct {
	value *Eventing
	isSet bool
}

func (v NullableEventing) Get() *Eventing {
	return v.value
}

func (v *NullableEventing) Set(val *Eventing) {
	v.value = val
	v.isSet = true
}

func (v NullableEventing) IsSet() bool {
	return v.isSet
}

func (v *NullableEventing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventing(val *Eventing) *NullableEventing {
	return &NullableEventing{value: val, isSet: true}
}

func (v NullableEventing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

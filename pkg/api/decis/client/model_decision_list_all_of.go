/*
 * Decision Service Fleet Manager
 *
 * Decision Service Fleet Manager is a Rest API to manage decision instances and connectors.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package decisclient

import (
	"encoding/json"
)

// DecisionListAllOf struct for DecisionListAllOf
type DecisionListAllOf struct {
	Items *[]DecisionRequest `json:"items,omitempty"`
}

// NewDecisionListAllOf instantiates a new DecisionListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecisionListAllOf() *DecisionListAllOf {
	this := DecisionListAllOf{}
	return &this
}

// NewDecisionListAllOfWithDefaults instantiates a new DecisionListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecisionListAllOfWithDefaults() *DecisionListAllOf {
	this := DecisionListAllOf{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DecisionListAllOf) GetItems() []DecisionRequest {
	if o == nil || o.Items == nil {
		var ret []DecisionRequest
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecisionListAllOf) GetItemsOk() (*[]DecisionRequest, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DecisionListAllOf) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DecisionRequest and assigns it to the Items field.
func (o *DecisionListAllOf) SetItems(v []DecisionRequest) {
	o.Items = &v
}

func (o DecisionListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableDecisionListAllOf struct {
	value *DecisionListAllOf
	isSet bool
}

func (v NullableDecisionListAllOf) Get() *DecisionListAllOf {
	return v.value
}

func (v *NullableDecisionListAllOf) Set(val *DecisionListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDecisionListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDecisionListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecisionListAllOf(val *DecisionListAllOf) *NullableDecisionListAllOf {
	return &NullableDecisionListAllOf{value: val, isSet: true}
}

func (v NullableDecisionListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecisionListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

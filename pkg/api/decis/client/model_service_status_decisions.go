/*
 * Decision Service Fleet Manager
 *
 * Decision Service Fleet Manager is a Rest API to manage decision instances and connectors.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package decisclient

import (
	"encoding/json"
)

// ServiceStatusDecisions The decision resource api status
type ServiceStatusDecisions struct {
	// Indicates whether we have reached decision maximum capacity
	MaxCapacityReached bool `json:"max_capacity_reached"`
}

// NewServiceStatusDecisions instantiates a new ServiceStatusDecisions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStatusDecisions(maxCapacityReached bool) *ServiceStatusDecisions {
	this := ServiceStatusDecisions{}
	this.MaxCapacityReached = maxCapacityReached
	return &this
}

// NewServiceStatusDecisionsWithDefaults instantiates a new ServiceStatusDecisions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatusDecisionsWithDefaults() *ServiceStatusDecisions {
	this := ServiceStatusDecisions{}
	return &this
}

// GetMaxCapacityReached returns the MaxCapacityReached field value
func (o *ServiceStatusDecisions) GetMaxCapacityReached() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MaxCapacityReached
}

// GetMaxCapacityReachedOk returns a tuple with the MaxCapacityReached field value
// and a boolean to check if the value has been set.
func (o *ServiceStatusDecisions) GetMaxCapacityReachedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxCapacityReached, true
}

// SetMaxCapacityReached sets field value
func (o *ServiceStatusDecisions) SetMaxCapacityReached(v bool) {
	o.MaxCapacityReached = v
}

func (o ServiceStatusDecisions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["max_capacity_reached"] = o.MaxCapacityReached
	}
	return json.Marshal(toSerialize)
}

type NullableServiceStatusDecisions struct {
	value *ServiceStatusDecisions
	isSet bool
}

func (v NullableServiceStatusDecisions) Get() *ServiceStatusDecisions {
	return v.value
}

func (v *NullableServiceStatusDecisions) Set(val *ServiceStatusDecisions) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusDecisions) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusDecisions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusDecisions(val *ServiceStatusDecisions) *NullableServiceStatusDecisions {
	return &NullableServiceStatusDecisions{value: val, isSet: true}
}

func (v NullableServiceStatusDecisions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusDecisions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

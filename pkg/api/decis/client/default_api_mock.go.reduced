// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package decisclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that DefaultApiMock does implement DefaultApi.
// If this is not the case, regenerate this file with moq.
var _ DefaultApi = &DefaultApiMock{}

// DefaultApiMock is a mock implementation of DefaultApi.
//
// 	func TestSomethingThatUsesDefaultApi(t *testing.T) {
//
// 		// make and configure a mocked DefaultApi
// 		mockedDefaultApi := &DefaultApiMock{
// 			CreateDecisionFunc: func(ctx _context.Context) ApiCreateDecisionRequest {
// 				panic("mock out the CreateDecision method")
// 			},
// 			CreateDecisionExecuteFunc: func(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error) {
// 				panic("mock out the CreateDecisionExecute method")
// 			},
// 			GetDecisionByIdFunc: func(ctx _context.Context, id string) ApiGetDecisionByIdRequest {
// 				panic("mock out the GetDecisionById method")
// 			},
// 			GetDecisionByIdExecuteFunc: func(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error) {
// 				panic("mock out the GetDecisionByIdExecute method")
// 			},
// 			ListDecisionsFunc: func(ctx _context.Context) ApiListDecisionsRequest {
// 				panic("mock out the ListDecisions method")
// 			},
// 			ListDecisionsExecuteFunc: func(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error) {
// 				panic("mock out the ListDecisionsExecute method")
// 			},
// 			VersionMetadataFunc: func(ctx _context.Context) ApiVersionMetadataRequest {
// 				panic("mock out the VersionMetadata method")
// 			},
// 			VersionMetadataExecuteFunc: func(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error) {
// 				panic("mock out the VersionMetadataExecute method")
// 			},
// 		}
//
// 		// use mockedDefaultApi in code that requires DefaultApi
// 		// and then make assertions.
//
// 	}
type DefaultApiMock struct {
	// CreateDecisionFunc mocks the CreateDecision method.
	CreateDecisionFunc func(ctx _context.Context) ApiCreateDecisionRequest

	// CreateDecisionExecuteFunc mocks the CreateDecisionExecute method.
	CreateDecisionExecuteFunc func(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error)

	// GetDecisionByIdFunc mocks the GetDecisionById method.
	GetDecisionByIdFunc func(ctx _context.Context, id string) ApiGetDecisionByIdRequest

	// GetDecisionByIdExecuteFunc mocks the GetDecisionByIdExecute method.
	GetDecisionByIdExecuteFunc func(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error)

	// ListDecisionsFunc mocks the ListDecisions method.
	ListDecisionsFunc func(ctx _context.Context) ApiListDecisionsRequest

	// ListDecisionsExecuteFunc mocks the ListDecisionsExecute method.
	ListDecisionsExecuteFunc func(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error)

	// VersionMetadataFunc mocks the VersionMetadata method.
	VersionMetadataFunc func(ctx _context.Context) ApiVersionMetadataRequest

	// VersionMetadataExecuteFunc mocks the VersionMetadataExecute method.
	VersionMetadataExecuteFunc func(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateDecision holds details about calls to the CreateDecision method.
		CreateDecision []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateDecisionExecute holds details about calls to the CreateDecisionExecute method.
		CreateDecisionExecute []struct {
			// R is the r argument value.
			R ApiCreateDecisionRequest
		}
		// GetDecisionById holds details about calls to the GetDecisionById method.
		GetDecisionById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDecisionByIdExecute holds details about calls to the GetDecisionByIdExecute method.
		GetDecisionByIdExecute []struct {
			// R is the r argument value.
			R ApiGetDecisionByIdRequest
		}
		// ListDecisions holds details about calls to the ListDecisions method.
		ListDecisions []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListDecisionsExecute holds details about calls to the ListDecisionsExecute method.
		ListDecisionsExecute []struct {
			// R is the r argument value.
			R ApiListDecisionsRequest
		}
		// VersionMetadata holds details about calls to the VersionMetadata method.
		VersionMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// VersionMetadataExecute holds details about calls to the VersionMetadataExecute method.
		VersionMetadataExecute []struct {
			// R is the r argument value.
			R ApiVersionMetadataRequest
		}
	}
	lockCreateDecision         sync.RWMutex
	lockCreateDecisionExecute  sync.RWMutex
	lockGetDecisionById        sync.RWMutex
	lockGetDecisionByIdExecute sync.RWMutex
	lockListDecisions          sync.RWMutex
	lockListDecisionsExecute   sync.RWMutex
	lockVersionMetadata        sync.RWMutex
	lockVersionMetadataExecute sync.RWMutex
}

// CreateDecision calls CreateDecisionFunc.
func (mock *DefaultApiMock) CreateDecision(ctx _context.Context) ApiCreateDecisionRequest {
	if mock.CreateDecisionFunc == nil {
		panic("DefaultApiMock.CreateDecisionFunc: method is nil but DefaultApi.CreateDecision was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateDecision.Lock()
	mock.calls.CreateDecision = append(mock.calls.CreateDecision, callInfo)
	mock.lockCreateDecision.Unlock()
	return mock.CreateDecisionFunc(ctx)
}

// CreateDecisionCalls gets all the calls that were made to CreateDecision.
// Check the length with:
//     len(mockedDefaultApi.CreateDecisionCalls())
func (mock *DefaultApiMock) CreateDecisionCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateDecision.RLock()
	calls = mock.calls.CreateDecision
	mock.lockCreateDecision.RUnlock()
	return calls
}

// CreateDecisionExecute calls CreateDecisionExecuteFunc.
func (mock *DefaultApiMock) CreateDecisionExecute(r ApiCreateDecisionRequest) (DecisionRequest, *_nethttp.Response, error) {
	if mock.CreateDecisionExecuteFunc == nil {
		panic("DefaultApiMock.CreateDecisionExecuteFunc: method is nil but DefaultApi.CreateDecisionExecute was just called")
	}
	callInfo := struct {
		R ApiCreateDecisionRequest
	}{
		R: r,
	}
	mock.lockCreateDecisionExecute.Lock()
	mock.calls.CreateDecisionExecute = append(mock.calls.CreateDecisionExecute, callInfo)
	mock.lockCreateDecisionExecute.Unlock()
	return mock.CreateDecisionExecuteFunc(r)
}

// CreateDecisionExecuteCalls gets all the calls that were made to CreateDecisionExecute.
// Check the length with:
//     len(mockedDefaultApi.CreateDecisionExecuteCalls())
func (mock *DefaultApiMock) CreateDecisionExecuteCalls() []struct {
	R ApiCreateDecisionRequest
} {
	var calls []struct {
		R ApiCreateDecisionRequest
	}
	mock.lockCreateDecisionExecute.RLock()
	calls = mock.calls.CreateDecisionExecute
	mock.lockCreateDecisionExecute.RUnlock()
	return calls
}

// GetDecisionById calls GetDecisionByIdFunc.
func (mock *DefaultApiMock) GetDecisionById(ctx _context.Context, id string) ApiGetDecisionByIdRequest {
	if mock.GetDecisionByIdFunc == nil {
		panic("DefaultApiMock.GetDecisionByIdFunc: method is nil but DefaultApi.GetDecisionById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDecisionById.Lock()
	mock.calls.GetDecisionById = append(mock.calls.GetDecisionById, callInfo)
	mock.lockGetDecisionById.Unlock()
	return mock.GetDecisionByIdFunc(ctx, id)
}

// GetDecisionByIdCalls gets all the calls that were made to GetDecisionById.
// Check the length with:
//     len(mockedDefaultApi.GetDecisionByIdCalls())
func (mock *DefaultApiMock) GetDecisionByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetDecisionById.RLock()
	calls = mock.calls.GetDecisionById
	mock.lockGetDecisionById.RUnlock()
	return calls
}

// GetDecisionByIdExecute calls GetDecisionByIdExecuteFunc.
func (mock *DefaultApiMock) GetDecisionByIdExecute(r ApiGetDecisionByIdRequest) (DecisionRequest, *_nethttp.Response, error) {
	if mock.GetDecisionByIdExecuteFunc == nil {
		panic("DefaultApiMock.GetDecisionByIdExecuteFunc: method is nil but DefaultApi.GetDecisionByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetDecisionByIdRequest
	}{
		R: r,
	}
	mock.lockGetDecisionByIdExecute.Lock()
	mock.calls.GetDecisionByIdExecute = append(mock.calls.GetDecisionByIdExecute, callInfo)
	mock.lockGetDecisionByIdExecute.Unlock()
	return mock.GetDecisionByIdExecuteFunc(r)
}

// GetDecisionByIdExecuteCalls gets all the calls that were made to GetDecisionByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.GetDecisionByIdExecuteCalls())
func (mock *DefaultApiMock) GetDecisionByIdExecuteCalls() []struct {
	R ApiGetDecisionByIdRequest
} {
	var calls []struct {
		R ApiGetDecisionByIdRequest
	}
	mock.lockGetDecisionByIdExecute.RLock()
	calls = mock.calls.GetDecisionByIdExecute
	mock.lockGetDecisionByIdExecute.RUnlock()
	return calls
}

// ListDecisions calls ListDecisionsFunc.
func (mock *DefaultApiMock) ListDecisions(ctx _context.Context) ApiListDecisionsRequest {
	if mock.ListDecisionsFunc == nil {
		panic("DefaultApiMock.ListDecisionsFunc: method is nil but DefaultApi.ListDecisions was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListDecisions.Lock()
	mock.calls.ListDecisions = append(mock.calls.ListDecisions, callInfo)
	mock.lockListDecisions.Unlock()
	return mock.ListDecisionsFunc(ctx)
}

// ListDecisionsCalls gets all the calls that were made to ListDecisions.
// Check the length with:
//     len(mockedDefaultApi.ListDecisionsCalls())
func (mock *DefaultApiMock) ListDecisionsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListDecisions.RLock()
	calls = mock.calls.ListDecisions
	mock.lockListDecisions.RUnlock()
	return calls
}

// ListDecisionsExecute calls ListDecisionsExecuteFunc.
func (mock *DefaultApiMock) ListDecisionsExecute(r ApiListDecisionsRequest) (DecisionList, *_nethttp.Response, error) {
	if mock.ListDecisionsExecuteFunc == nil {
		panic("DefaultApiMock.ListDecisionsExecuteFunc: method is nil but DefaultApi.ListDecisionsExecute was just called")
	}
	callInfo := struct {
		R ApiListDecisionsRequest
	}{
		R: r,
	}
	mock.lockListDecisionsExecute.Lock()
	mock.calls.ListDecisionsExecute = append(mock.calls.ListDecisionsExecute, callInfo)
	mock.lockListDecisionsExecute.Unlock()
	return mock.ListDecisionsExecuteFunc(r)
}

// ListDecisionsExecuteCalls gets all the calls that were made to ListDecisionsExecute.
// Check the length with:
//     len(mockedDefaultApi.ListDecisionsExecuteCalls())
func (mock *DefaultApiMock) ListDecisionsExecuteCalls() []struct {
	R ApiListDecisionsRequest
} {
	var calls []struct {
		R ApiListDecisionsRequest
	}
	mock.lockListDecisionsExecute.RLock()
	calls = mock.calls.ListDecisionsExecute
	mock.lockListDecisionsExecute.RUnlock()
	return calls
}

// VersionMetadata calls VersionMetadataFunc.
func (mock *DefaultApiMock) VersionMetadata(ctx _context.Context) ApiVersionMetadataRequest {
	if mock.VersionMetadataFunc == nil {
		panic("DefaultApiMock.VersionMetadataFunc: method is nil but DefaultApi.VersionMetadata was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockVersionMetadata.Lock()
	mock.calls.VersionMetadata = append(mock.calls.VersionMetadata, callInfo)
	mock.lockVersionMetadata.Unlock()
	return mock.VersionMetadataFunc(ctx)
}

// VersionMetadataCalls gets all the calls that were made to VersionMetadata.
// Check the length with:
//     len(mockedDefaultApi.VersionMetadataCalls())
func (mock *DefaultApiMock) VersionMetadataCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockVersionMetadata.RLock()
	calls = mock.calls.VersionMetadata
	mock.lockVersionMetadata.RUnlock()
	return calls
}

// VersionMetadataExecute calls VersionMetadataExecuteFunc.
func (mock *DefaultApiMock) VersionMetadataExecute(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error) {
	if mock.VersionMetadataExecuteFunc == nil {
		panic("DefaultApiMock.VersionMetadataExecuteFunc: method is nil but DefaultApi.VersionMetadataExecute was just called")
	}
	callInfo := struct {
		R ApiVersionMetadataRequest
	}{
		R: r,
	}
	mock.lockVersionMetadataExecute.Lock()
	mock.calls.VersionMetadataExecute = append(mock.calls.VersionMetadataExecute, callInfo)
	mock.lockVersionMetadataExecute.Unlock()
	return mock.VersionMetadataExecuteFunc(r)
}

// VersionMetadataExecuteCalls gets all the calls that were made to VersionMetadataExecute.
// Check the length with:
//     len(mockedDefaultApi.VersionMetadataExecuteCalls())
func (mock *DefaultApiMock) VersionMetadataExecuteCalls() []struct {
	R ApiVersionMetadataRequest
} {
	var calls []struct {
		R ApiVersionMetadataRequest
	}
	mock.lockVersionMetadataExecute.RLock()
	calls = mock.calls.VersionMetadataExecute
	mock.lockVersionMetadataExecute.RUnlock()
	return calls
}

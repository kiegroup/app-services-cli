/*
 * Decision Service Fleet Manager
 *
 * Decision Service Fleet Manager is a Rest API to manage decision instances and connectors.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package decisclient

import (
	"encoding/json"
)

// EventingAllOf struct for EventingAllOf
type EventingAllOf struct {
	Source *string `json:"source,omitempty"`
	Sink   *string `json:"sink,omitempty"`
}

// NewEventingAllOf instantiates a new EventingAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventingAllOf() *EventingAllOf {
	this := EventingAllOf{}
	return &this
}

// NewEventingAllOfWithDefaults instantiates a new EventingAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventingAllOfWithDefaults() *EventingAllOf {
	this := EventingAllOf{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EventingAllOf) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventingAllOf) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EventingAllOf) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *EventingAllOf) SetSource(v string) {
	o.Source = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *EventingAllOf) GetSink() string {
	if o == nil || o.Sink == nil {
		var ret string
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventingAllOf) GetSinkOk() (*string, bool) {
	if o == nil || o.Sink == nil {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *EventingAllOf) HasSink() bool {
	if o != nil && o.Sink != nil {
		return true
	}

	return false
}

// SetSink gets a reference to the given string and assigns it to the Sink field.
func (o *EventingAllOf) SetSink(v string) {
	o.Sink = &v
}

func (o EventingAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Sink != nil {
		toSerialize["sink"] = o.Sink
	}
	return json.Marshal(toSerialize)
}

type NullableEventingAllOf struct {
	value *EventingAllOf
	isSet bool
}

func (v NullableEventingAllOf) Get() *EventingAllOf {
	return v.value
}

func (v *NullableEventingAllOf) Set(val *EventingAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventingAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventingAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventingAllOf(val *EventingAllOf) *NullableEventingAllOf {
	return &NullableEventingAllOf{value: val, isSet: true}
}

func (v NullableEventingAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventingAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

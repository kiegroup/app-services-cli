openapi: 3.0.0 # need this as first line to allow some IDEs to know this is an openapi document.
# All endpoints defined here will be discoverable by all users. If there is a need to keep some endpoints "private", add them to the "managed-services-api-private.yaml" file
info:
  title: Decision Service Fleet Manager
  version: 0.0.1
  description: Decision Service Fleet Manager is a Rest API to manage decision instances and connectors.
servers:
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
  - url: http://localhost:8080
    description: localhost
  - url: /
    description: current domain
paths:
  /api/daas-api/v1:
    get:
      operationId: versionMetadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionMetadata"
          description: Version metadata
      summary: Retrieves the version metadata
  /api/daas-api/v1/status:
    get:
      operationId: serviceStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStatus"
          description: Ok
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      summary: Retrieves the status of resources e.g whether we have reached maximum service capacity
      security:
        - Bearer: []
  /api/daas-api/v1/decisions/{id}:
    get:
      operationId: getDecisionById
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionRequest"
              examples:
                DecisionRequestGetResponseExample:
                  $ref: "#/components/examples/DecisionRequestExample"
                DecisionRequestGetResponseWithFailedCreationStatusExample:
                  $ref: "#/components/examples/DecisionRequestFailedCreationStatusExample"
          description: Decision request found by id
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                404Example:
                  $ref: "#/components/examples/404Example"
          description: No decision request with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Unexpected error occurred
      security:
        - Bearer: []
      summary: Get a decision request by id
    delete:
      operationId: deleteDecisionById
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
              #No Content
          description: Deleted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                400DeletionExample:
                  $ref: "#/components/examples/400DeletionExample"
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                404DeleteExample:
                  $ref: "#/components/examples/404DeleteExample"
          description: No decision request with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500DeleteExample:
                  $ref: "#/components/examples/500DeleteExample"
          description: Unexpected error occurred
      summary: Delete a decision request by id
      security:
        - Bearer: []
    parameters:
      - $ref: "#/components/parameters/id"
  /api/daas-api/v1/decisions:
    post:
      operationId: createDecision
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Decision data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionRequestPayload"
            examples:
              USRegion:
                $ref: "#/components/examples/USRegionExample"
              EURegion:
                $ref: "#/components/examples/EURegionExample"
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionRequest"
              examples:
                DecisionRequestPostResponseExample:
                  $ref: "#/components/examples/DecisionRequestExample"
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                400CreationExample:
                  $ref: "#/components/examples/400CreationExample"
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
                403MaxAllowedInstanceReachedExample:
                  $ref: "#/components/examples/403MaxAllowedInstanceReachedExample"
          description: User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                404Example:
                  $ref: "#/components/examples/404Example"
          description: The requested resource doesn't exist
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                409NameConflictExample:
                  $ref: "#/components/examples/409NameConflictExample"
          description: A conflict has been detected in the creation of this resource
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: An unexpected error occurred creating the Decision Request
      security:
        - Bearer: []
      summary: Create a new decision Request
    get:
      summary: Returns a list of Decision requests
      operationId: listDecisions
      security:
        - Bearer: []
      responses:
        "200":
          description: A list of Decision requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionList"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                InvalidQueryExample:
                  $ref: "#/components/examples/400InvalidQueryExample"
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service.
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/search"
  /api/daas-api/v1/cloud_providers:
    get:
      summary: Retrieves the list of supported cloud providers.
      operationId: listCloudProviders
      security:
        - Bearer: []
      responses:
        "200":
          description: Retrieved list of supported cloud providers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudProviderList"
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
  /api/daas-api/v1/cloud_providers/{id}/regions:
    get:
      summary: Retrieves the list of supported regions of the supported cloud provider.
      operationId: listCloudProviderRegions
      security:
        - Bearer: []
      responses:
        "200":
          description: Retrieved list of supported cloud providers regions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudRegionList"
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
  /api/daas-api/v1/serviceaccounts:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccountList"
          description: List of service accounts
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listServiceAccounts
      summary: List service accounts
    post:
      requestBody:
        description: service account request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccountRequest"
            examples:
              sa:
                $ref: "#/components/examples/ServiceAccountRequestExample"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
              examples:
                serviceaccount:
                  $ref: "#/components/examples/ServiceAccountExample"
          description: service account created
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
          description: list of service account
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: createServiceAccount
      summary: Create a service account
  "/api/daas-api/v1/serviceaccounts/{id}":
    get:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
              examples:
                sa:
                  $ref: "#/components/examples/ServiceAccountByIdExample"
          description: get service account by id
      security:
        - Bearer: []
      operationId: getServiceAccountById
      summary: get service account by id
    summary: Get service account by id
    description: Get the service account with the given id
    delete:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service
        "500":
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteServiceAccount
      summary: Delete service account
  "/api/daas-api/v1/serviceaccounts/{id}/reset-credentials":
    post:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
              examples:
                sa-reset:
                  $ref: "#/components/examples/ServiceAccountExample"
          description: reset credentials
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
          description: auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/403Example"
          description: User not authorized to access the service
        "500":
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: resetServiceAccountCreds
      summary: reset credentials for the service account
  #
  # These are the user-facing related endpoints
  #
  /api/daas-api/v1/decisions/{id}/metrics/query_range:
    get:
      summary: Get metrics with timeseries range query by decision id.
      operationId: GetMetricsByRangeQuery
      security:
        - Bearer: []
      responses:
        "200":
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsRangeQueryList"
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/duration"
        - $ref: "#/components/parameters/interval"
        - $ref: "#/components/parameters/filters"
  /api/daas-api/v1/decisions/{id}/metrics/query:
    get:
      summary: Get metrics with instant query by decision id.
      operationId: GetMetricsByInstantQuery
      security:
        - Bearer: []
      responses:
        "200":
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsInstantQueryList"
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/filters"

components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
    Eventing:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            source:
              type: string
            sink:
              type: string
    Error:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Error"
    DecisionRequest:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            status:
              type: string
            status_message:
              type: string
            description:
              type: string
            name:
              type: string
            url:
              type: string
            model:
              type: object
              properties:
                md5:
                  type: string
                href:
                  type: string
            eventing:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Eventing"
            submitted_at:
              format: date-time
              type: string
            published_at:
              format: date-time
              type: string
            configuration:
              type: object
              additionalProperties:
                type: string
            tags:
              type: object
              additionalProperties:
                type: string
            version:
              type: string
          example:
            $ref: "#/components/examples/DecisionRequestExample"
    DecisionList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "DecisionList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: "#/components/examples/DecisionRequestExample"
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/DecisionRequest"
    VersionMetadata:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          example:
            kind: "APIVersion"
            id: "v1"
            href: "/api/managed-services-api/v1"
            collections:
              - id: "decisions"
                href: "/decisions"
                kind: "DecisionList"
          properties:
            collections:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/ObjectReference"
    ServiceStatus:
      description: Schema for the service status response body
      example:
        decisions:
          max_capacity_reached: true
      type: object
      properties:
        decisions:
          description: The decision resource api status
          type: object
          required:
            - max_capacity_reached
          properties:
            max_capacity_reached:
              description: Indicates whether we have reached decision maximum capacity
              type: boolean
    DecisionRequestPayload:
      description: Schema for the request body sent to /decisions POST
      required:
        - name
      type: object
      properties:
        name:
          description: "The name of the Decision cluster. It must consist of lower-case alphanumeric characters or '-', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters."
          type: string
    CloudProviderList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "CloudProviderList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: "#/components/examples/CloudProviderExample"
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/CloudProvider"
    CloudRegionList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "CloudRegionList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: "#/components/examples/CloudRegionExample"
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/CloudRegion"
    CloudProvider:
      description: "Cloud provider."
      properties:
        kind:
          description: "Indicates the type of this object. Will be 'CloudProvider' link."
          type: string
        id:
          description: "Unique identifier of the object."
          type: string
        display_name:
          description: "Name of the cloud provider for display purposes."
          type: string
        name:
          description: "Human friendly identifier of the cloud provider, for example `aws`."
          type: string
        enabled:
          description: "Whether the cloud provider is enabled for deploying an OSD cluster."
          type: boolean
      required:
        - enabled
    CloudRegion:
      description: "Description of a region of a cloud provider."
      properties:
        kind:
          description: "Indicates the type of this object. Will be 'CloudRegion'."
          type: string
        id:
          description: "Unique identifier of the object."
          type: string
        display_name:
          description: "Name of the region for display purposes, for example `N. Virginia`."
          type: string
        enabled:
          description: "Whether the region is enabled for deploying an OSD cluster."
          type: boolean
          default: false
      required:
        - enabled
    ServiceAccount:
      description: "Service Account created in MAS-SSO for the Decision Cluster for authentication"
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            id:
              description: "server generated unique id of the service account"
              type: string
            name:
              description: ""
              type: string
            description:
              description: ""
              type: string
            clientID:
              type: string
            clientSecret:
              type: string
            owner:
              type: string
            created_at:
              format: date-time
              type: string
          example:
            $ref: "#/components/examples/ServiceAccountExample"
    ServiceAccountRequest:
      description: "Schema for the request to create a service account"
      required:
        - name
      type: object
      properties:
        name:
          description: "The name of the service account"
          type: string
        description:
          description: "A description for the service account"
          type: string
      example:
        $ref: "#/components/examples/ServiceAccountRequestExample"
    ServiceAccountListItem:
      description: ""
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            id:
              description: "server generated unique id of the service account"
              type: string
            clientID:
              description: "client id of the service account"
              type: string
            name:
              description: "name of the service account"
              type: string
            owner:
              description: "owner of the service account"
              type: string
            created_at:
              format: date-time
              description: "service account creation timestamp"
              type: string
            description:
              type: string
              description: "description of the service account"
    ServiceAccountList:
      allOf:
        - type: object
          example:
            kind: "ServiceAccountList"
            items:
              - $ref: "#/components/examples/ServiceAccountListItemExample"
          properties:
            kind:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/ServiceAccountListItem"
    # user-facing metrics related #
    MetricsRangeQueryList:
      allOf:
        - type: object
          example:
            kind: "MetricsRangeQueryList"
            id: "1nbpS70HduPe4l0to8jSg2CLzfu"
            items:
              $ref: "#/components/examples/MetricsRangeQueryExample"
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/RangeQuery"
    RangeQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/values"
    values:
      type: object
      properties:
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value
    MetricsInstantQueryList:
      allOf:
        - type: object
          example:
            kind: "MetricsInstantQueryList"
            id: "1nbpS70HduPe4l0to8jSg2CLzfu"
            items:
              $ref: "#/components/examples/MetricsInstantQueryExample"
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/InstantQuery"
    InstantQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value

  parameters:
    id:
      name: id
      description: The id of record
      schema:
        type: string
      in: path
      required: true
    duration:
      name: duration
      in: query
      description: The length of time in minutes over which to return the metrics.
      required: true
      schema:
        type: integer
        format: int64
        default: 5
        minimum: 1
        maximum: 4320
      examples:
        duration:
          value: 5
    interval:
      name: interval
      in: query
      description: The interval in seconds between data points.
      required: true
      schema:
        type: integer
        format: int64
        default: 30
        minimum: 1
        maximum: 10800
      examples:
        interval:
          value: 30
    filters:
      name: filters
      in: query
      description: List of metrics to fetch. Fetch all metrics when empty. List entries are decision internal metric names.
      schema:
        type: array
        items:
          type: string
        default: []
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: "1"
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: "100"
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement.
        Each query can be ordered by any of the decisionRequests fields.
        For example, in order to retrieve all decisions ordered by their name:

        ```sql
        name asc
        ```

        Or in order to retrieve all decisions ordered by their name _and_ created date:

        ```sql
        name asc, created_at asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        the results will be ordered by name.
      explode: true
      examples:
        orderBy:
          value: "name asc"
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    search:
      description: |
        Search criteria.

        The syntax of this parameter is similar to the syntax of the _where_ clause of an
        SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are `<>`, `=` or `LIKE`.
        Allowed joins are `AND` and `OR`, however there is a limit of max 10 joins in the search query.

        Examples:

        To retrieve decision request with name equal `my-decision` and region equal `aws`, the value should be:

        ```
        name = my-decision and cloud_provider = aws
        ```

        To retrieve decision request with its name starting with `my`, the value should be:

        ```
        name like my%25
        ```

        If the parameter isn't provided, or if the value is empty, then all the decisions
        that the user has permission to see will be returned.

        Note. If the query is invalid, an error will be returned
      explode: true
      name: search
      in: query
      required: false
      examples:
        search:
          value: "name = my-decision and cloud_provider = aws"
      schema:
        type: string
      style: form
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  examples:
    USRegionExample:
      value:
        region: "us-east-1"
        cloud_provider: "aws"
        name: "serviceapitest"
    EURegionExample:
      value:
        region: "eu-west-1"
        cloud_provider: "aws"
        name: "serviceapitest"
    DecisionRequestExample:
      value:
        kind: Decision
        id: aba2a420-2afe-456c-b126-073bff1a2023
        version: "1"
        href: http://localhost:8080/decisions/aba2a420-2afe-456c-b126-073bff1a2023/versions/1
        name: my-brilliant-decision
        description: A human readable description of my decision
        model:
          md5: 8eb41527a8f53e5d673771fa2159edac
          href: http://localhost:8080/decisions/aba2a420-2afe-456c-b126-073bff1a2023/versions/1/dmn
        configuration:
          key: value
        tags:
          key: value
        status: BUILDING
    DecisionRequestFailedCreationStatusExample:
      value:
        id: f5e155b9-e1f4-4768-a99e-fc04c5036f0a
        kind: Decision
        version: "4"
        href: http://localhost:8080/decisions/f5e155b9-e1f4-4768-a99e-fc04c5036f0a/versions/4
        name: my-brilliant-decision
        description: A human readable description of my decision
        model:
          md5: 8eb41527a8f53e5d673771fa2159edac
          href: http://localhost:8080/decisions/f5e155b9-e1f4-4768-a99e-fc04c5036f0a/versions/4/dmn
        configuration:
          key: value
        tags:
          key: value
        status: FAILED
        status_message: Failed to deploy Decision.
        submitted_at: "2020-10-05T12:51:24.053142Z"
    CloudProviderExample:
      value:
        kind: "CloudProvider"
        id: "aws"
        name: "aws"
        display_name: "Amazon Web Services"
        enabled: true
    CloudRegionExample:
      value:
        kind: "CloudRegion"
        id: "us-east-1"
        display_name: "US East, N. Virginia"
        enabled: true
    ServiceAccountRequestExample:
      value:
        name: "my-app-sa"
        description: "service account for my app"
    ServiceAccountExample:
      value:
        id: "1"
        kind: "ServiceAccount"
        href: "/serviceaccounts/1"
        name: "my-app-sa"
        description: "service account for my app"
        clientID: "SA-121212"
        clientSecret: "secret"
        owner: "test-user"
        created_at: "2021-04-07T16:24:01+05:30"
    ServiceAccountByIdExample:
      value:
        id: "1"
        kind: "ServiceAccount"
        href: "/serviceaccounts/1"
        name: "my-app-sa"
        description: "service account for my app"
        clientID: "SA-121212"
        owner: "test-user"
        created_at: "2021-04-07T16:24:01+05:30"
    ServiceAccountListItemExample:
      value:
        id: "1"
        kind: "ServiceAccountListItem"
        href: "/serviceaccounts/1"
        name: "my-app-sa"
        description: "service account for my app"
        clientID: "SA-121212"
        owner: "test-user"
        created_at: "2021-04-07T16:24:01+05:30"
    MetricsRangeQueryExample:
      value:
        metric:
          __name__: decision_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: decision-service
          topic: __consumer_offsets
        values:
          - Timestamp: 1611670230000
            Value: 84154
          - Timestamp: 1611670260000
            Value: 85888
          - Timestamp: 1611670290000
            Value: 87622
    MetricsInstantQueryExample:
      value:
        metric:
          __name__: decision_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: decision-service
          topic: __consumer_offsets
        Timestamp: 1611670230000
        Value: 84154
    400DeletionExample:
      value:
        id: "103"
        kind: "Error"
        href: "/errors/103"
        code: "MGD-SERV-API-103"
        reason: "Synchronous action is not supported, use async=true parameter"
        operation_id: "1iWIimqGcrDuL61aUxIZqBTqNRa"
    400CreationExample:
      value:
        id: "103"
        kind: "Error"
        href: "/errors/103"
        code: "MGD-SERV-API-103"
        reason: "Synchronous action is not supported, use async=true parameter"
        operation_id: "1iWIimqGcrDuL61aUxIZqBTqNRa"
    400InvalidQueryExample:
      value:
        id: "203"
        kind: "Error"
        href: "/errors/23"
        code: "MGD-SERV-API-23"
        reason: "Failed to parse search query: Unable to list decision requests for api_decision_service: MGD-SERV-API-23: Failed to parse search query: Unsupported column name for search: 'id'. Supported column names are: region, name, cloud_provider, name, status. Query invalid: id = 123"
        operation_id: "1lWDGuybIrEnxrAem724gqkkiDv"
    404Example:
      value:
        id: "404"
        kind: "Error"
        href: "/errors/7"
        code: "MGD-SERV-API-7"
        reason: "The requested resource doesn't exist"
    404DeleteExample:
      value:
        id: "7"
        kind: "Error"
        href: "/errors/7"
        code: "MGD-SERV-API-7"
        reason: "DecisionResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found"
        operation_id: "1iYO7g2g6HTdUKUa2ksH82kQD3y"
    401Example:
      value:
        id: "11"
        kind: "Error"
        href: "/errors/11"
        code: "MGD-SERV-API-11"
        reason: "Unable to verify JWT token: Required authorization token not found"
        operation_id: "1iY3UhEhwmXBpWPfI2lNekpd4ZD"
    403Example:
      value:
        id: "4"
        kind: "Error"
        href: "/errors/4"
        code: "MGD-SERV-API-4"
        reason: "User 'foo-bar' is not authorized to access the service."
        operation_id: "1lY3UiEhznXBpWPfI2lNejpd4YC"
    403MaxAllowedInstanceReachedExample:
      value:
        id: "5"
        kind: "Error"
        href: "/errors/5"
        code: "MGD-SERV-API-5"
        reason: "User 'foo-bar' has reached a maximum number of 6 allowed instances."
        operation_id: "1lY3UiEkxnXBpVPeI2oNejd3XB"
    409NameConflictExample:
      value:
        id: "36"
        kind: "Error"
        href: "/errors/36"
        code: "MGD-SERV-API-36"
        reason: "Decision cluster name is already used"
        operation_id: "6kY0UiEkzkXCzWPeI2oYehd3ED"
    500Example:
      value:
        id: "9"
        kind: "Error"
        href: "/errors/9"
        code: "MGD-SERV-API-9"
        reason: "Unspecified error"
        operation_id: "1ieELvF9jMQY6YghfM9gGRsHvEW"
    500DeleteExample:
      value:
        id: "9"
        kind: "Error"
        href: "/errors/9"
        code: "MGD-SERV-API-9"
        reason:
          "error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is '404', code is 'CLUSTERS-MGMT-404' and operation identifier is '1g5or50viu07oealuehrkc26dgftj1ac':
          Cluster '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)"
        operation_id: "1iYTsWry6nsqb2sNmFj5bXpD7Ca"
